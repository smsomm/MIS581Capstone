my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
remaineder(5)
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
submit()
sd(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function{x+1}c(8,4,0))
evaluate(function(x){x+1}c(8,4,0))
evaluate(function(x){x*1}c(8,4,0))
info
evaluate(function(x){x(1)}c(8, 4, 0))
evaluate(function(x){x[1]}c(8, 4, 0))
evaluate(function(x){x*1}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){length[x]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram
telegram(c("Hello", "Friends"))
submit()
mad_libs(place="Germany", adjective="cold", noun="adults")
submit()
submit()
"I"%p% "love"%p%"R!"
head(flags)
dim(flags)
viewinfo(flags)
class(flags)
cls_list<-lapply(flags, class)
cls_list
class(cls_list)
character(cls_list)
as.character(cls_list)
?sapply
cls_list<-sapply(flags, class)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors<- flags[,11:17]
head(6)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,6,6))
unique(c(3,4,5,5,5,6,6))
lapply(flags, unique)
unique_vals<- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
ls(plants)
ls(workspace)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(1)
head(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
d1<- Sys.date()
d1
d1<- Sys.Date()
class
class(d1)
unclass(d1)
d1
d2<- as.Date("1969-01-01")
unclass(d2)
sys.time()
t1<- Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3<-strptime("October 17, 1986 08:24")
t3<-c("October 17, 1986 08:24")
t3<- "October 17, 1986 08:24"
t4<- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
sys.time>t1
Sys.time(t1)>t1
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(), t1, units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab="speed")
plot(x = cars$speed, y = cars$dist, xlab="Speed")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(cars)
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, main="My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(mtcars, formula=mpg~cyl)
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
date()
?Table
?table()
??ccf
?load()
?ls()
??ls()
mean(c(100, 200, 300, 102, 230))
summary(c(480, 490, 510, 500))
mydata<-c(100, 200, 300, 102, 230)
t.test(mydata, confint(0.90))
t.test(mydata)
t.test(mydata, confint=0.90)
yourdata<-c(4808, 4908, 5807, 5184)
t.test(yourdata, mu=500, alternative="greater")
t.test(yourdata)
t.test(mydata, conf.level=0.90)
data<-c(480, 490, 510, 500)
t.test(data, conf.level=0.99)
sd(mydata)
summary(data)
t.test(yourdata, mu=5000, alternative="greater")
summary(mydata)
mtcars
plot (amg, mpg)
plot (am, mpg)
plot(mtcars, am~mpg)
plot(mtcars)
plot(x=mpg, y=am)
plot(x=mtcars$am, y=mtcars$mpg)
SSys.Date()
plot(x=mtcars$am, y=mtcars$mpg)
Sys.Date()
?glm
glm(mtcars$am, mtcars$mpg)
am<- mtcars$am
mpg<-mtcars$mpg
glm(mtcars~, data=am)
glm(mtcars, data=am)
glm.fit(am, mpg)
am<- mtcars$am
mpg<-mtcars$mpg
cars<-mtcars(am, mpg)
log.mod<-glm(am~mpg, data=mtcars, family=binomial)
log.mod
plot(log.mod)
am<- mtcars$am
mpg<-mtcars$mpg
log.mod<-glm(am~mpg, data=mtcars, family=binomial)
log.mod
Sys.Date()
plot(log.mod)
plot(log.mod, x=am, y=mpg)
plot(x=mtcars$am, y=mtcars$mpg)
glm.fit(x=mtcars$am, y=mycars$mpg)
glm.fit(x=am, y=mpg)
log.mod<-glm.fit(am~mpg, data=mtcars, family=binomial)
am<- mtcars$am
mpg<-mtcars$mpg
log.mod<-glm.fit(am~mpg, data=mtcars, family=binomial)
summary(log.mod)
abline(log.mod)
abline(log.mod, x=mtcars$am, y=mtcars$mpg)
abline?
?abline
curve(predict*logr_vm, mtcars(mpg=x), type="respons", add=TRUE)
plot(mtcars$am, mtcars$mpg)
curve(predict.glm(am~mpg, data=mtcars, family=binary))
abline(log.mod)
summary(log.mod)
log.mod<-glm.fit(am~mpg, data=mtcars, family=binomial)
log.mod<-glm(am~mpg, data=mtcars, family=binomial)
summary(log.mod)
pred<-predict(log.mod, newdata=mtcars, type="response")
pred
y_pred_num<-ifelse(pred>0.5, 1,0)
y_pred<-factor(y_pred_num, levels=c(0,1))
y_act<-testData$am
y_act<-mtcars$am
y_act
predict
predict.glm()
predict.glm(mpg, newdata=mtcars, type="response")
predicted <- predict(model,newdata=subset(test,select=c(1)),type='response')
predicted <- ifelse(predicted > 0.5,1,0)
predicted <- predict(model,newdata=subset(test,select=c(1)),type='response')
predicted <- ifelse(am > 0.5,1,0)
fit=glm(am~mpg, data=mtcars, family=binomial)
newdat<- data.frame(mpg=seq(min(mtcars$mpg), max(mtcars$mpg, len=40))
newdat$am=predict(fit, newdata=newdat, type="response")
newdat<- data.frame(mpg=seq(min(mtcars$mpg), max(mtcars$mpg), len=40))
newdat$am=predict(fit, newdata=newdat, type="response")
plot(am~mpg, data=mtcars)
lines(am~mpg, newdat, lwd=2)
for(i in seq(0,6,2)){print(i)}
myvalue<-function(x){z <- x*cos(x) + x^2; print(z)}
myvalue(2.35)
for(i in 1:10){print(i)}
for(i in c(1,10)){print(i)}
for(i in c(1:10)){print(i)}
for(i in 1-10){print(i)}
summary(iris)
head(iris)
Sys.Date()
summary(iris)
sys.date()
summary(iris)
Sys.date()
summary(iris)
Sys.Date()
Sys.Time()
Sys.time()
head(iris)
Sys.time()
summary(iris)
Sys.time()
iris
mean(iris$Sepal.Length)
median(iris$Sepal.Width)
mean(iris$Sepal.Length)
median(iris$Sepal.Length)
range(iris$Sepal.Length)
Sys.time()
mean(iris$Sepal.Width)
median(iris$Sepal.Width)
range(iris$Sepal.Width)
Sys.time()
hist(iris$Sepal.Lenth)
hist(iris$Sepal.Lenth)
hist?
?hist
?hist
length<-iris$Sepal.Length
hist(length)
Sys.time()
boxplot(length)
Sys.time()
hist(length)
width<-iris$Sepal.Width
hist(width)
boxplot(width)
Sys.time()
correlation<-lm(iris$Sepal.Length~iris$Sepal.Width)
correlation
Sys.time()
plot(correlation)
plot(correlation)
x<-iris$Sepal.Length
y<-iris$Sepal.Width
plot(x,y)
abline(correlation, col="blue")
plot(x,y)
abline(lm(y~x, data=iris), col="blue")
Sys.time()
x<-iris$Sepal.Length
y<-iris$Sepal.Width
plot(x,y)
abline(lm(y~x, data=iris), col="blue")
Sys.time()
valid.df
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/sheri/OneDrive/Documents/MIS510")
credit<-read.csv("GermanCredit.csv", header=TRUE)
summary(credit)
mean(credit$AMOUNT)
plot(credit$AMOUNT~credit$DURATION)
hist(credit$DURATION)
names(credit)
head(credit)
credit.df<-credit[,-c(1)]
set.seed(2)
train.index <-sample(c(1:dim(credit.df)[1]), dim(credit.df)[1]*0.6)
train.df<-credit.df[train.index,]
valid.df<-credit.df[-train.index, ]
logit.reg<-glm(RESPONSE~., data=train.df, family="binomial")
options(scipen=999)
summary(logit.reg)
logit.reg.pred<-predict(logit.reg, valid.df, type="response")
data.frame(actual=valid.df$RESPONSE[1:5], predicted=logit.reg.pred[1:5])
library(gains)
gain<-gains(valid.df$RESPONSE, logit.reg.pred, groups=length(logit.reg.pred))
plot(c(0,gain$cume.pct.of.total*sum(valid.df$RESPONSE))~c(0,gain$cume.obs), xlab="# cases", ylab="Cumulative", main="")
lines(c(0,sum(valid.df$RESPONSE))~c(0,dim(valid.df)[1]), lty=2)
valid.df
logit.reg
lm.fit<-logit.reg
data.frame(summary(lm.fit)$coefficients, odds=exp(coef(lm.fit)))
round(data.frame(summary(lm.fit)$coefficients, odds=exp(coef(lm.fit))),5)
library(gains)
pred<-predict(lm.fit, valid.df)
gain<-gains(valid.df$RESPONSE, pred, groups=100)
confusionMatrix(ifelse(pred > 0.5, 1, 0), valid.df$RESPONSE)
library(caret)
confusionMatrix(ifelse(pred > 0.5, 1, 0), valid.df$RESPONSE)
levels(pred)
levels(valid.df$RESPONSE)
confusionMatrix(ifelse(pred > 0.5, 1, 0), levels=c(-3:0, 1:3), valid.df$RESPONSE)
as.numeric(pred)
as.factor(pred)
as.integer(pred)
levels(as.integer(pred))
as.data.frame.integer(pred)
as.integer(pred)
as.data.frame.integer(pred)
pred
binomial(pred)
lm.fit<-logit.reg
data.frame(summary(lm.fit)$coefficients, odds=exp(coef(lm.fit)))
round(data.frame(summary(lm.fit)$coefficients, odds=exp(coef(lm.fit))),5)
library(gains)
pred<-predict(lm.fit, valid.df)
gain<-gains(valid.df$RESPONSE, pred, groups=100)
lm.fit<-logit.reg
data.frame(summary(lm.fit)$coefficients, odds=exp(coef(lm.fit)))
round(data.frame(summary(lm.fit)$coefficients, odds=exp(coef(lm.fit))),5)
library(gains)
pred<-predict(lm.fit, valid.df)
gain<-gains(valid.df$RESPONSE, pred, groups=100)
confusionMatrix(valid.df$RESPONSE, pred, labels=[1,0])
confusionMatrix(valid.df$RESPONSE, pred, labels=c(1,0)
1
confusionMatrix(valid.df$RESPONSE, pred, labels=c(1,0))
levels(valid.df$RESPONSE)
confusionMatrix(data=pred, reference = valid.df, positive="1")
confusionMatrix(data=pred, reference = valid.df$RESPONSE, positive="1")
confusionMatrix(data=pred, reference = credit.df$RESPONSE, positive="1")
confusionMatrix(data=as.numeric(pred>0.5), reference=valid.df$RESPONSE)
?dnn
confusionMatrix(data=as.factor(pred>0.5), reference = as.factor(valid.df$RESPONSE>0.5))
confusionMatrix(data=as.factor(pred>0.5), reference = as.factor(valid.df$RESPONSE>0.5))
lm.fit
summary(lm.fit)
confusionMatrix(data=as.factor(pred>0.5), reference = as.factor(valid.df$RESPONSE>0.5))
library(caret)
confusionMatrix(data=as.factor(pred>0.5), reference = as.factor(valid.df$RESPONSE>0.5))
default.ct<-rpart(RESPONSE~., data=train,df, method="class")
library(rpart)
library(rpart.plot)
default.ct<-rpart(RESPONSE~., data=train,df, method="class")
default.ct<-rpart(RESPONSE~., data=train.df, method="class")
prp(default.ct, type=1, extra=1. under=TRUE, split.font=1, varlen=10)
prp(default.ct, type=1, extra=1, under=TRUE, split.font=1, varlen=10)
library(rpart)
library(rpart.plot)
default.ct<-rpart(RESPONSE~., data=train.df, method="class")
prp(default.ct, type=1, extra=1, under=TRUE, split.font=1, varlen=10)
deeper.ct<-rpart(RESPONSE ~., data=train.df, method="class",cp=0, minsplit=1 )
length(deepter.ct$frame$var[deeper.ct$frame$car=="<leaf>"])
length(deeper.ct$frame$var[deeper.ct$frame$car=="<leaf>"])
prp(deeper.ct, type=1, extra=1, under=TRUE, split.font=1, varlen=-10, box.col=ifelse(deeper.ct$frame$var=="<leaf>", 'gray', 'white'))
pruned.ct<-prune(cv.ct, cp=cv.ct$cptable[which.min(cv.ct$cptable[,"xerror"]), "CP"])
default.ct<-rpart(RESPONSE~., data=train.df, parms=list(loss=matrix(c(0,5,1,0), nrow=2))cp=0.001)
default.ct<-rpart(RESPONSE~., data=train.df, parms=list(loss=matrix(c(0,5,1,0), nrow=2)), cp=0.001)
prp(default.ct, extra=1)
default.ct<-rpart(RESPONSE~., data=train.df, parms=list(loss=matrix(c(0,5,1,0), nrow=2)), cp=0.001)
pruned.ct<-rpart(RESPONSE~., data=train.df, method="class", cp=0.01)
prp(pruned.ct)
default.ct<-rpart(RESPONSE~., data=train.df, cp=0.001)
prp(default.ct, extra=1)
pruned.ct<-rpart(RESPONSE~., data=train.df, method="class", cp=0.01)
prp(pruned.ct)
library(rpart)
library(rpart.plot)
default.ct<-rpart(RESPONSE~., data=train.df, method="class")
prp(default.ct, type=1, extra=1, under=TRUE, split.font=1, varlen=10)
default.ct<-rpart(RESPONSE~., data=train.df, cp=0.001)
prp(default.ct, extra=1)
pruned.ct<-rpart(RESPONSE~., data=train.df, method="class", cp=0.01)
prp(pruned.ct)
Sys.Date()
Sys.Date()
Sys.time()
default.ct.point.pred.train<-predict(default.ct, train.df, type="class")
default.ct<-rpart(RESPONSE~., data=valid.df, cp=0.001)
valid.ct<-rpart(RESPONSE~., data=valid.df, cp=0.001)
prp(valid.df, extra=1)
prp(valid.ct, extra=1)
pruned.valid.ct<-rpart(RESPONSE~., data=valid.df, method="class", cp=0.01)
prp(pruned.valid.ct)
valid.ct<-rpart(RESPONSE~., data=valid.df, cp=0.001)
prp(valid.df, extra=1)
valid.ct<-rpart(RESPONSE~., data=valid.df, cp=0.001)
prp(valid.ct, extra=1)
pruned.valid.ct<-rpart(RESPONSE~., data=valid.df, method="class", cp=0.01)
prp(pruned.valid.ct)
valid.ct<-rpart(RESPONSE~., data=valid.df, cp=0.001)
prp(valid.ct, extra=1)
pruned.valid.ct<-rpart(RESPONSE~., data=valid.df, method="class", cp=0.01)
prp(pruned.valid.ct, extra=1)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
mean(x..per.100, doctors.df)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
MEAN(X..per.1000)
source('~/.active-rstudio-document')
mean(X..per.1000)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
if doctors.df$ï..LOCATION = "AUS" then print(mean(doctors.df$countofdrs))
if (doctors.df$ï..LOCATION = "AUS") {print(mean(doctors.df$countofdrs))}
source('~/.active-rstudio-document', encoding = 'UTF-8')
if (doctors.df$ï..LOCATION = "AUS") {
print(mean(doctors.df$countofdrs))
}
if (doctors.df$ï..LOCATION = "AUS") {
print(mean(doctors.df$countofdrs))
}
{
print(mean(doctors.df$countofdrs))
}
{
print(mean(doctors.df$countofdrs))
}else{exclude
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
healthdata2.df<-subset(healthdata, Model!="NA")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
Sys.time()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
